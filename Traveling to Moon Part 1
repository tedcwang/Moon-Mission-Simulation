###########################################################################
#   Author:  Theodore Wang                                                #
#                                                                         #
#  Program:  Traveling to the Moon                                        #
#  Due Date:  May 30, 2017                                                #
#                                                                         #
#  Language:  Python 2.7                                                  #
#  IDE:  Trinket                                                          #
#                                                                         #
#  Purpose:  Recreate a version of the Apollo missions; based off the 
#  mars mission assignment, this version has the rocket take off from 
#  Earth, land on the moon, then take off from the moon and reland on 
#  Earth again.
#
#   "Bugs":  Some problems regarding Earth velocity and rocket launches   #
###########################################################################

# INITIAL JOURNEY
# Flight parameters
launchday=20 # Date of launch
rinitial=6*7e6 # Starting altitude of the rocket
moonrocketdist=10*8e6 # Distance from moon considered a success
vinitial=5.12e3 # Rocket initial speed 
v = vinitial*norm(vec(2, -3, 0)) # Rocket velocity with changeable vectors

# Position and velocity generated by http://ssd.jpl.nasa.gov/horizons.cgi
# May 18, 2017
moonpos=1000*vec(2.760923425146916E+05,-2.747040388588842E+05,0)
moonvel=1000*vec(6.508987492563607E-01,7.285244988677730E-01,0)
earthpos=1000*vec(-3.395946002084490E+03,3.378869815882885E+03,0)
earthvel=1000*vec(-8.006078637191145E-04,-8.960878222180214E-04,0)

# Constants
AU=1000*149597871 # AU in m
G=6.67384e-11   # Gravitational constant

# Diameters used for drawing the moon and earth (not to scale)
Dearth=0.0009*AU   # Earth diameter
Dmoon=0.0002*AU   # Moon diameter

# Mass
Mearth=5.972e24
Mmoon=7.34767309e22
Mrocket=1.4690e4   # Approximate mass of the Apollo capsule 

# Time
day=24*3600
dt=2*3600
t=0

# Setting up the scene
scene = display(width=430, height=400, userspin=False, userzoom=True)
scene.append_to_title("""<br>Click the simulation to begin.""")

# Arrow scle
scale1=Dearth

# Setting up 3D objects
moon=sphere(dispay=scene, pos=moonpos, radius=Dmoon/2, color=color.white)
earth=sphere(dispay=scene, pos=earthpos, radius=Dearth/2, color=color.blue)
rocket=sphere(pos=earth.pos+rinitial*norm(v), radius=earth.radius/6, color=color.red)
rocketarrow1=arrow(dispay=scene, pos=earth.pos, axis=scale1*norm(v), color=color.white)

# Creating trails
moontrail=attach_trail(moon, radius=0.2*Dmoon, trail_type="points", interval=2, retain=1000)
rockettrail=attach_trail(rocket, radius=0.2*rocket.radius, trail_type="points", interval=2, retain=1000)
rockettrail.stop

# Creating strings and labels
tstr="Time: {:.0f} days".format(0)   # Top bar on animation shows passage of time
tlabel=label(pos=vector(0,1.2*mag(moonpos),0), text=tstr)
launchstr="Starting Date: May 18, 2017. \n"+launchday+" days until launch. \n Click to Run."
launchlabel=label(pos=vector(0,-1.2*mag(moonpos),0), text=launchstr)

# Setting the range
scene.range=2*mag(moonpos)  # Zoom factor


# Setting booleans and the initial velocitiy and momentum of the rocket
def launchRocket():
    global vrocket, procket, rocketLaunched, justNowLaunched
    rocketLaunched=True
    justNowLaunched=True
    vrocket=earthvel+v
    procket=Mrocket*vrocket

# initial positions, velocities, and momenta of all objects
earth.pos=earthpos   # Renaming variables
rocket.pos=earthpos
vearth=earthvel
vrocket=earthvel+v   # Velocity of rocket is Earth velocity + personal velocity in flight parameters
moon.pos=moonpos
vmoon=moonvel
pmoon=Mmoon*vmoon
procket=Mrocket*vrocket

# Running booleans
rocketLaunched=False
run = False
justNowLaunched=False

# Click to begin simulation
scene.waitfor('click')
launchstr="Launch Day "+launchday
launchlabel.text=launchstr

# Rate of animation; changing the number affects passage of simulated time
while True:
  rate(50)

  # Moon - makes the moon sphere orbit the earth 
  p=moon.pos-earth.pos
  pmag=mag(p)
  punit=norm(p)
  Fmoon=-G*(Mearth*Mmoon/pmag**2*punit)   # Newton's law of gravitation
  pmoon=pmoon+Fmoon*dt
  moon.pos=moon.pos+pmoon/Mmoon*dt
  
  # Rocket - makes the rocket orbit the Earth and the Moon
  if(rocketLaunched):
    # Earth
    rocketarrow1.visible=False
    p=rocket.pos-earth.pos
    pmag=mag(p)
    punit=norm(p)
    Frocket_earth=-G*Mrocket*Mearth/pmag**2*punit   # Newton's law of gravitation
    # Moon
    p2=rocket.pos-moon.pos
    p2mag=mag(p2)
    p2unit=norm(p2)
    Frocket_moon=-G*Mrocket*Mmoon/p2mag**2*p2unit   # Newton's law of gravitation
          
  # Disables rocket arrow on Earth once rocket launches
  if(rocketLaunched):
    rocketarrow1.visible=False

    # Computing Fnet, procket, and rocket.pos
    Fnet=Frocket_earth+Frocket_moon
    procket=procket+Fnet*dt
    rocket.pos=rocket.pos+procket/Mrocket*dt
    if(justNowLaunched):
      justNowLaunched=False

  # Since rocket doesn't launch, it stays on the Earth
  else:
    rocket.pos=earth.pos+rinitial*norm(v)

    # The arrow remains as well
    rocketarrow1.pos=rocket.pos

    # Updating passage of tim
    t=t+dt
    tstr="Time: {:.0f} days".format(t/day)
    tlabel.text=tstr

    # Launching rocket on the launch day (specified in parameters)     
    if(t/day>launchday and rocketLaunched==false):
      launchRocket()
        
    # Arriving at the Moon
    if(mag(rocket.pos-moon.pos)<moonrocketdist):
      launchstr="Arrived on the Moon. \nTravel time = {:.0f} days".format(t/day-115)   # Measures final date of landing
      launchlabel.text=launchstr

      
      # RETURN JOURNEY
      # Flight parameters (still within 'if' statement)
      launchday=10 # Date of launch
      rinitial=6.4e6 # Initial altitude above the moon
      earthrocketdist=5*1.5e7 # Distance from Earth considered a success
      vinitial=5e1 # Initial speed of rocket
      v = vinitial*norm(vec(2, -3, 0)) # Initial velocity of rocket; change the direction only
    
      # Set booleans and initial velocitiy and momentum of the rocket
      def launchRocket():
          global vrocket, procket, rocketLaunched, justNowLaunched
          rocketLaunched=True
          justNowLaunched=True
          vrocket=earthvel+v
          procket=Mrocket*vrocket
      
      # Booleans
      rocketLaunched=False
      run = False
      justNowLaunched=False
      
      # Simulation pause
      scene.waitfor('click')
      launchstr="Launch Day "+launchday
      launchlabel.text=launchstr
      
      while True:
              rate(25)
            
              # Moon - makes the moon sphere orbit the earth 
              p=moon.pos-earth.pos
              pmag=mag(p)
              punit=norm(p)
              Fmoon=-G*(Mearth*Mmoon/pmag**2*punit)   # Newton's law of gravitation
              pmoon=pmoon+Fmoon*dt
              moon.pos=moon.pos+pmoon/Mmoon*dt
              
              # Rocket
              if(rocketLaunched):
                # Earth
                  rocketarrow1.visible=False
                  p=rocket.pos-earth.pos
                  pmag=mag(p)
                  punit=norm(p)
                  Frocket_earth=(-G*Mrocket*Mearth)/(pmag**2)*punit   # Newton's law of gravitation
                # Moon
                  p2=rocket.pos-moon.pos
                  p2mag=mag(p2)
                  p2unit=norm(p2)
                  Frocket_moon=(-G*Mrocket*Mmoon)/(p2mag**2)*p2unit   # Newton's law of gravitation
                
      
      
      # If launched, then compute Fnet, procket, and rocket.pos
              if(rocketLaunched):
                  rocketarrow1.visible=False
                  Fnet=Frocket_earth+Frocket_moon
                  procket=procket+Fnet*dt
                  rocket.pos=rocket.pos+procket/Mrocket*dt
                  if(justNowLaunched):
                      justNowLaunched=False
      #########
      
                  if(justNowLaunched):
                      justNowLaunched=False
              # If not launched
              else:
                  rocket.pos=moon.pos+rinitial*norm(v)
      
              # Rocketarrow
              rocketarrow1.pos=rocket.pos
      
              # Update time and label
              t=t+dt
              tstr="Time: {:.0f} days".format(t/day)
              tlabel.text=tstr
      
              # Launch rocket on the launch day        
              if(t/day>launchday and rocketLaunched==false):
                  launchRocket()
               
              # Arrival on Earth
              if(mag(rocket.pos-earth.pos)<earthrocketdist):
                  launchstr="Arrived on Earth. \nTravel time = {:.0f} days".format(t/day)
                  launchlabel.text=launchstr
                  scene.waitfor('click')
                  
